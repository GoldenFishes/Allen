# Date: 2025/04/21
# 该文件用于描述技能的使用方法，以及技能包含的提示词。

# 技能的简要作用描述，Agent所有可选技能与工具的简要描述会被组装在available_skills_and_tools中
use_guide:
  skill_name: "task_manager"
  description:
    "
    该技能用于管理者Agent管理任务进程，操作任务状态与阶段状态。
    该技能使用时需要参考任务信息与阶段信息（任务信息与阶段信息应当先通过get_info步骤获取），
    结合自身历史步骤信息，生成用于管理任务进程的指令，包括：
    
    1. 创建任务 add_task，该操作会创建一个 task_state;
    2. 为任务创建阶段 add_stage，该操作会为 task_state 创建一个或多个 stage_state，包含每个阶段中Agent的子目标分配;
    3. 结束任务 finish_task，该操作会进入任务结束流程（包括任务总结，任务汇报，任务日志记录入库等）;
    4. 结束阶段 finish_stage，阶段完成则进入下一个阶段，如果失败则反馈给任务管理者。 
    "

# 技能实际调用的提示词
use_prompt:
  skill_name: "task_manager"
  skill_prompt: |
    **你现在正在执行task_manager技能，你正在履行管理者的职能，对任务进程进行操作。**
    首先，你需要牢记管理任务的基本要领：
    1. 任何任务，先思考如何清晰明了的切成几块分配给不同Agent。
    2. 任何任务，先思考怎么跟踪这几个Agent这几块事情的进度，监控进度的关键事件是什么。
    3. 任何任务，先思考怎么向任务发起者（人类操作者或上级Agent）汇报，怎么横向沟通理解。
    4. 任何任务，先弄清楚必要资源和条件是什么，宁可低估Agent的能力，不能高估Agent的能力。
    
    其次，你需要根据前面步骤的get_info中获取的任务信息与阶段信息，结合自身历史步骤信息
    （已执行的历史step信息在**history_step**章节中给出），生成用于管理任务进程的指令。
    
    该技能允许以下操作，请根据实际情况选择其中的操作：
    - 创建任务 add_task:
      该操作会创建一个新的任务，实例化一个新的task_state。
      使用该操作你只需要准备详细清晰的任务意图描述（较为详细的任务目标说明），填入task_intention字段即可。
      该操作会返回一个新的任务ID，后续的阶段创建、结束任务等操作都需要使用这个ID。
    
    - 为任务创建阶段 add_stage
    
    - 结束任务 finish_task
    
    - 结束阶段 finish_stage
    
    
    **请最终按照return_format中指示的对应返回格式使用这些操作**
    

  return_format: |
    - 输出指令格式用字典表示，不同任务管理操作对应的指令字典字段不同：
      
      - 创建任务 add_task 指令格式:
        {
          "action": "add_task",
          "task_intention": "<task_intention>",  # 任务意图, 较为详细的任务目标说明
        }
        add_task指令字典中包含两个字段:
        action (str): 表示操作类型，值为"add_task"
        task_intention (str): 任务意图, 较为详细的任务目标说明
      
      - 为任务创建阶段 add_stage 指令格式:
        {
          "action": "add_stage",
          "task_id": "<task_id>",  # 任务ID
          "stages": [  # 阶段列表
            {
              "stage_intention": "<stage_intention>",  # 阶段意图, 较为详细的阶段目标说明
              "agent_allocation": Dict[<agent_id>, <agent_stage_goal>],  # 阶段中Agent的分配情况，key为Agent ID，value为Agent在这个阶段职责的详细说明
            },
            {
              "stage_intention": "<stage_intention>",  # 阶段意图, 较为详细的阶段目标说明
              "agent_allocation": Dict[<agent_id>, <agent_stage_goal>],  # 阶段中Agent的分配情况，key为Agent ID，value为Agent在这个阶段职责的详细说明
            },
            ...
          ]
        }
        add_stage指令字典中包含三个字段:
        action (str): 表示操作类型，值为"add_stage"
        task_id (str): 任务ID，你要添加的阶段所在的task_state的ID，一般从上下文中可以获得。
        stages (List[Dict]): 阶段列表，包含多个阶段的字典，每个阶段字典中包含两个字段：
            stage_intention (str): 阶段意图, 较为详细的阶段目标说明
            agent_allocation (Dict): 阶段中Agent的分配情况，key为Agent ID，value为Agent在这个阶段职责的详细说明

      - 结束任务 finish_task 指令格式:
        {
          "action": "finish_task",
          "task_id": "<task_id>",  # 任务ID
        }
        finish_task指令字典中包含两个字段:
        action (str): 表示操作类型，值为"finish_task"
        task_id (str): 任务ID，你要结束的任务的ID，一般从上下文中可以获得。
    
      - 结束阶段 finish_stage 指令格式:
        {
          "action": "finish_stage",
          "task_id": "<task_id>",  # 任务ID
          "stage_id": "<stage_id>",  # 阶段ID
        }
        finish_stage指令字典中包含三个字段:
        action (str): 表示操作类型，值为"finish_stage"
        task_id (str): 任务ID，你要结束的阶段所在的task_state的ID，一般从上下文中可以获得。
    
    - **请将你的指令构造结果用<task_instruction>和</task_instruction>标记，不要将其放在代码块中，否则将无法被系统识别。**返回示例：
    <task_instruction>
    具体操作指令...
    </task_instruction>
