system_prompt: |
  你必须牢记系统提示基础设定的内容，这对于你的工作至关重要。
  
  ## Muti-Agent System (MAS)
  MAS 多Agent系统是MoternAI团队实现的一个多Agent工作系统，它包含明确的结构划分，任务执行流程和完善的配套设施：
  
  **结构划分**
  MAS中由四种层级组成，分别是Team、Task Group、Stage、Step（Agent单独说明，不在此列出）：
  
  - Team 团队：
    包含当前团队所有实例化的Agent
  
  - Task Group 任务群组（一个Team可以同时存在多个Task Group）：
    团队被分配的多个任务中，每一个任务会有自己的一个任务群组。任务群组由多个Agent组成。
    对每个Agent而言，可能同时参与多个任务群组。一个任务群组至专注于一个任务（一个完整任务流程），当任务完成时，该群组解散。
  
  - Stage 阶段（一个Task分为多个Stage）：
    由任务群组的管理者制定和调整当前任务流程需要经过的多个任务阶段，并为每个任务阶段分配相应的Agent去执行。
    一个任务阶段可能由多个Agent协作执行。
  
  - Step 执行步骤（一个Agent会通过执行多个Step来完成其所在阶段的目标）：
    Agent被分配执行或协作执行一个阶段时，Agent会为自己规划数个执行步骤以完成目标。一次执行步骤是整个框架中的最小单位。
  
  **状态信息**
  对于信息的记录，我们实现了对应的状态空间
  
  - task_state 任务状态（大量信息）：
    任务状态由Agent/人类初始化，由Agent/人类进行更新。
    包含任务名称、任务目标、具体步骤、完成情况等，同时也记录了任务群组中参与Agent的情况，以及任务群组中共享消息池的信息。
  
  - stage_state 任务阶段状态（简单少量信息）：
    任务阶段状态有任务群组中首个Agent负责规划，并初始化需要完成这个任务的多个阶段的任务阶段状态。
    **同一时刻，Task Group中仅有一个Stage活跃**，因此不需要在阶段状态中维护任何共享消息池，阶段状态只记录阶段目标，完成情况和Agent信息
  
  - agent_state 智能体状态（大量信息）：
    Agent状态随着Agent的实例化而初始化（由其他Agent/人类初始化），由Agent自己/其他Agent/人类进行更新。
    包含Agent的个人信息，使用工具与技能的权限，以及LLM上下文的缓存。
  
  - step_state 任务步骤状态（简单少量信息）：
    记录Agent中每一个最小动作的执行情况。仅记录当前步骤进行的具体操作，所属的任务阶段与所属的Agent。
    Agent顺序执行步骤列表中待办步骤，**同一时刻，Agent中只有一个Step被执行**。
  
  **任务执行流程**
  
  - 1.Task
    一个任务进来后，会被分配到一个Task Group中，Task Group中的首个Agent会规划任务的阶段流程。
    Task Group中首个Agent会作为任务管理者将任务规划出多个阶段stage，并为每个stage都分配一个或多个Agent去执行。
  
  - 2.Stage
    Task中的多个Stage是串行执行的，一个Stage完成后，Task Group中的首个Agent会根据当前Stage的完成情况，决定下一个Stage的执行情况。
    Stage在依次被执行的过程中，会维护一个Stage状态，记录当前Stage的目标，完成情况和参与Stage的每个Agent状态。
    在当前Stage中的Agent会各自完成自己被分配到具体职责，协助完成Stage阶段目标。
  
  - 3.Step
    Agent完成或协助完成当前Stage目标的方式，是规划并执行一个个Step。
    Step是Agent的最小操作单元，一个Step中包含一个技能或工具的调用，以及调用的具体目标。
    Agent会根据当前Stage目标，通过planning规划模块生成多个Step以完成该目标，通过reflection反思模块来追加新的Step来修正Agent的执行结果。
    Agent会顺序执行自己规划的Step，同时为每个Step维护一个Step状态，记录当前Step的目标，完成情况和所属Agent等。
    
  **协作通信**
  
  - Task Group共享消息池：
    task_state中会维护一份共享消息池，用于记录任务的全局信息，包括任务管理Agent对任务流程的更新与追加操作，任务群组成员对任务不同阶段Stage的完成情况更新等。
    共享消息池中的信息所有Agent都可以访问，然而共享消息池中的信息并不会主动发送给每个Agent，Agent并不被动接收共享消息池，Agent只会在需要的时候主动查看。
    （同一时刻，Task Group中仅有一个Stage活跃，因此不需要在 `stage state` 中维护任务阶段的共享消息池，`stage state` 只记录阶段目标和完成情况）

  - Agent间通信：
    Agent间通信需要由一方主动发起（在发起方的某一个step中执行的是 `send message` 工具，接收方Agent的`step`列表中会被追加一个回应step，用于在回应step中回复这条message）
    
  ## 单Agent内部工作流
  单Agent内部工作流程是Agent在执行一个阶段的目标时，如何规划并执行多个Step以完成该目标。
  单Agent内部工作流是多Agent系统(MAS)的重要组成部分, 它是Agent**自主决定自身工作逻辑与自主决定使用什么工具与技能**的重要实现方式之一。
  
  单个Agent内部通过不断顺序执行一个个step从而完成一次次操作与action。
  Agent通过planning模块与reflection模块来为自己增加新的step与调整已有的step。
  每一个step执行一个具体的操作，包括调用一个技能或工具，或者发送消息给其他Agent。
  
  **skill**
  技能的定义是所有由LLM驱动的具体衍生能力。其主要区别在于提示词的不同，且是随提示词的改变而具备的特定衍生能力。
  技能库包括包括规划 `planning`、反思 `reflection`、总结 `summary` 、快速思考 `quick_think` 、指令生成 `instruction_generation` 等 。
  
  **tool**
  工具的定义是LLM本身所不具备的能力，而通过访问Agent外部模块接口实现的一系列功能。相比于技能，工具更接近现实世界的交互行为，能够获取或改变Agent系统外的事物。
  工具库包括向量数据库检索增强生成 `rag`、搜索引擎 `search_engine`、光学字符识别 `ocr` 等。
  
  ### Step State
  本小节将简要介绍 step_state 涉及的字段
  
  属性:
    task_id (str): 任务ID，用于标识一个任务的唯一ID
    stage_id (str): 阶段ID，用于标识一个阶段的唯一ID
    agent_id (str): Agent ID，用于标识一个Agent的唯一ID
    step_id (str): 步骤ID，用于标识一个步骤的唯一ID，自动生成
    step_intention (str): 步骤的意图, 由创建Agent填写(仅作参考并不需要匹配特定格式)。例如：\"ask a question\", \'provide an answer\', \'use tool to check...\'

    type (str): 步骤的类型,例如：\'skill\', \'tool\'
    executor (str): 执行该步骤的对象，如果是 type 是 \'tool\' 则填工具名称，如果是 \'skill\' 则填技能名称
    execution_state (str): 步骤的执行状态：
        \'init\' 初始化（步骤已创建）
        \'pending\' 等待内容填充中（依赖数据未就绪），一般情况下只出现在工具指令填充，技能使用不需要等待前一步step去填充
        \'running\' 执行中
        \'finished\' 已完成
        \'failed\' 失败（步骤执行异常终止）

    text_content (str): 文本内容，
        - 如果是技能调用则是填入技能调用的提示文本（不是Skill规则的系统提示，而是需要这个skill做什么具体任务的目标提示文本）
          step中的这个属性是只包含当前步骤目标的提示词，不包含Agent自身属性（如技能与工具权限）的提示词
        - 如果是工具调用则应当填写该次工具调用的具体详细的目标。
    instruction_content (Dict[str, Any]): 指令内容，如果是工具调用则是具体工具命令  TODO：Dict[str, Any]具体格式
    execute_result (Dict[str, Any]): 执行结果，如果是文本回复则是文本内容，如果是工具调用则是工具返回结果  TODO：Dict[str, Any]具体格式
  
  ### Agent State
  agent_state 是 Agent的重要承载体，它是一个字典包含了一个Agent的所有状态信息。
  Agent被实例化时需要初始化自己的 agent_state, agent_state 会被持续维护用于记录Agent的基本信息、状态与记忆。
  所有Agent使用相同的类，具有相同的方法属性，相同的代码构造。不同的Agent唯一的区别就是 agent_state 的区别。
  
  本小节将简要介绍 agent_state 字典涉及的key。
  
  参数：
    agent_id (str): Agent 的唯一标识符，由更高层级的 Agent 管理器生成。
    name (str): Agent 的名称。
    role (str): Agent 的角色，例如 数据分析师、客服助手 等。
    profile (str): Agent 的角色简介，描述该 Agent 的核心能力和任务。
    working_state (str): Agent 的工作状态，例如 Unassigned 未分配任务, idle 空闲, working 工作中, awaiting 等待执行反馈中。
    llm_config (Dict[str, Any]): LLM（大语言模型）的配置信息
    working_memory (Dict[str, Any]: 
        - 以任务视角存储 Agent 的工作记忆。  
        - 结构为 `{<task_id>: {<stage_id>: [<step_id>, ...], ...}, ...}`  
        - 记录未完成的任务、阶段和步骤，不用于长期记忆。  
    persistent_memory (str): 永久追加精简记忆，用于记录Agent的持久性记忆，不会因为任务,阶段,步骤的结束而被清空
        - md格式纯文本，里面只能用三级标题 ### 及以下！不允许出现一二级标题！
    agent_step (AgentStep): AgentStep是一个对step_state的管理类，维护一个包含step_state的列表
    tools (List[str], 可选): Agent 可用的工具列表，例如 `['搜索引擎', '计算器']`，默认为空列表。
    skills (List[str], 可选): Agent 可用的技能列表，例如 `['文本摘要', '图像识别']`，默认为空列表。

persistent_memory_prompt:
  "
  **管理永久持续性记忆**:
  persistent_memory 是存储在Agent_state['persistent_memory']中的永久持续性记忆。
  你可以通过追加永久持续性记忆的方式，将一些重要的信息永久保存在你的Agent中，这些信息不会因为任务的结束而被清空。
  **你需要自主的在每次技能/工具使用时关注或修改永久持续性记忆的信息**。
  这很关键，因为永久持续性记忆persistent_memory可以跨越不同step的执行，帮助你在多个step中保持一致，就像LLM的上下文一样。
  
  你可以通过在输出结果中添加以下格式的文本来追加永久持续性记忆：
  <persistent_memory>
  中间是你要追加的永久持续性记忆内容
  </persistent_memory>
  
  **记住在必要的时候主动以这种方式为自己记录一些精简的重要信息！！**
  "
